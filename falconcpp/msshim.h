template <>
struct falcon::define_interface<Office::IAccessible>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::_IMsoDispObj>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::_IMsoOleAccDispObj>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::_CommandBars>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::MsoMenuAnimation *), 
HRESULT(__stdcall*)(void *, Office::MsoMenuAnimation), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int, BSTR *, int *), 
HRESULT(__stdcall*)(void *, int, BSTR *, int *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBarControls * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, int, int, Picture), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Office::CommandBar>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBarControls * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoBarPosition *), 
HRESULT(__stdcall*)(void *, Office::MsoBarPosition), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoBarProtection *), 
HRESULT(__stdcall*)(void *, Office::MsoBarProtection), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoBarType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::CommandBarControls>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *)> type;
};
template <>
struct falcon::define_interface<Office::CommandBarControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::_CommandBarButton>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoButtonState *), 
HRESULT(__stdcall*)(void *, Office::MsoButtonState), 
HRESULT(__stdcall*)(void *, Office::MsoButtonStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoButtonStyle), 
HRESULT(__stdcall*)(void *, Office::MsoCommandBarButtonHyperlinkType *), 
HRESULT(__stdcall*)(void *, Office::MsoCommandBarButtonHyperlinkType), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::CommandBarPopup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, Office::CommandBarControls * *), 
HRESULT(__stdcall*)(void *, Office::MsoOLEMenuGroup *), 
HRESULT(__stdcall*)(void *, Office::MsoOLEMenuGroup), 
HRESULT(__stdcall*)(void *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::_CommandBarComboBox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int, BSTR *), 
HRESULT(__stdcall*)(void *, int, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoComboStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoComboStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::_CommandBarActiveX>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *, LONG *, LONG *, LONG *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::CommandBarControl * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage *), 
HRESULT(__stdcall*)(void *, Office::MsoControlOLEUsage), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::CommandBar * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoControlType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, IUnknown * *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::Adjustments>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int, float *), 
HRESULT(__stdcall*)(void *, int, float)> type;
};
template <>
struct falcon::define_interface<Office::CalloutFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutDropType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutAngleType *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutAngleType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutDropType *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutType *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutType)> type;
};
template <>
struct falcon::define_interface<Office::ColorFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoColorType *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorIndex), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::ConnectorFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::Shape *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Shape *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoConnectorType *), 
HRESULT(__stdcall*)(void *, Office::MsoConnectorType)> type;
};
template <>
struct falcon::define_interface<Office::FillFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoGradientStyle, int, float), 
HRESULT(__stdcall*)(void *, Office::MsoPatternType), 
HRESULT(__stdcall*)(void *, Office::MsoGradientStyle, int, Office::MsoPresetGradientType), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTexture), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoGradientStyle, int), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoGradientColorType *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, Office::MsoGradientStyle *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoPatternType *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetGradientType *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTexture *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoTextureType *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoFillType *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::GradientStops * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTextureAlignment *), 
HRESULT(__stdcall*)(void *, Office::MsoTextureAlignment), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::PictureEffects * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::FreeformBuilder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoSegmentType, Office::MsoEditingType, float, float, float, float, float, float), 
HRESULT(__stdcall*)(void *, Office::Shape * *)> type;
};
template <>
struct falcon::define_interface<Office::GroupShapes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::ShapeRange * *)> type;
};
template <>
struct falcon::define_interface<Office::LineFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadLength *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadLength), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadStyle), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadWidth *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadWidth), 
HRESULT(__stdcall*)(void *, Office::MsoLineDashStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoLineDashStyle), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadLength *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadLength), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadStyle), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadWidth *), 
HRESULT(__stdcall*)(void *, Office::MsoArrowheadWidth), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoPatternType *), 
HRESULT(__stdcall*)(void *, Office::MsoPatternType), 
HRESULT(__stdcall*)(void *, Office::MsoLineStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoLineStyle), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState)> type;
};
template <>
struct falcon::define_interface<Office::ShapeNode>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoEditingType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoSegmentType *)> type;
};
template <>
struct falcon::define_interface<Office::ShapeNodes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::ShapeNode * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int, Office::MsoSegmentType, Office::MsoEditingType, float, float, float, float, float, float), 
HRESULT(__stdcall*)(void *, int, Office::MsoEditingType), 
HRESULT(__stdcall*)(void *, int, float, float), 
HRESULT(__stdcall*)(void *, int, Office::MsoSegmentType)> type;
};
template <>
struct falcon::define_interface<Office::PictureFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoPictureColorType *), 
HRESULT(__stdcall*)(void *, Office::MsoPictureColorType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::Crop * *)> type;
};
template <>
struct falcon::define_interface<Office::ShadowFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoShadowType *), 
HRESULT(__stdcall*)(void *, Office::MsoShadowType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoShadowStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoShadowStyle), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState)> type;
};
template <>
struct falcon::define_interface<Office::Script>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoScriptLanguage *), 
HRESULT(__stdcall*)(void *, Office::MsoScriptLanguage), 
HRESULT(__stdcall*)(void *, Office::MsoScriptLocation *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::Scripts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Script * *), 
HRESULT(__stdcall*)(void *, IDispatch *, Office::MsoScriptLocation, Office::MsoScriptLanguage, BSTR, BSTR, BSTR, Office::Script * *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::Shape>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoFlipCmd), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, float, Office::MsoTriState, Office::MsoScaleFrom), 
HRESULT(__stdcall*)(void *, float, Office::MsoTriState, Office::MsoScaleFrom), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *, Office::MsoZOrderCmd), 
HRESULT(__stdcall*)(void *, Office::Adjustments * *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType), 
HRESULT(__stdcall*)(void *, Office::MsoBlackWhiteMode *), 
HRESULT(__stdcall*)(void *, Office::MsoBlackWhiteMode), 
HRESULT(__stdcall*)(void *, Office::CalloutFormat * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::ConnectorFormat * *), 
HRESULT(__stdcall*)(void *, Office::FillFormat * *), 
HRESULT(__stdcall*)(void *, Office::GroupShapes * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::LineFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::ShapeNodes * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::PictureFormat * *), 
HRESULT(__stdcall*)(void *, Office::ShadowFormat * *), 
HRESULT(__stdcall*)(void *, Office::TextEffectFormat * *), 
HRESULT(__stdcall*)(void *, Office::TextFrame * *), 
HRESULT(__stdcall*)(void *, Office::ThreeDFormat * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoShapeType *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::Script * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::IMsoDiagram * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::CanvasShapes * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::TextFrame2 * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::IMsoChart * *), 
HRESULT(__stdcall*)(void *, Office::MsoShapeStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoShapeStyleIndex), 
HRESULT(__stdcall*)(void *, Office::MsoBackgroundStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoBackgroundStyleIndex), 
HRESULT(__stdcall*)(void *, Office::SoftEdgeFormat * *), 
HRESULT(__stdcall*)(void *, Office::GlowFormat * *), 
HRESULT(__stdcall*)(void *, Office::ReflectionFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::SmartArt * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtLayout *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoGraphicStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoGraphicStyleIndex), 
HRESULT(__stdcall*)(void *, Office::MsoPictureType, BSTR, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::Model3DFormat * *)> type;
};
template <>
struct falcon::define_interface<Office::ShapeRange>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::MsoAlignCmd, Office::MsoTriState), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoDistributeCmd, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *, Office::MsoFlipCmd), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, float, Office::MsoTriState, Office::MsoScaleFrom), 
HRESULT(__stdcall*)(void *, float, Office::MsoTriState, Office::MsoScaleFrom), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *, Office::MsoZOrderCmd), 
HRESULT(__stdcall*)(void *, Office::Adjustments * *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType), 
HRESULT(__stdcall*)(void *, Office::MsoBlackWhiteMode *), 
HRESULT(__stdcall*)(void *, Office::MsoBlackWhiteMode), 
HRESULT(__stdcall*)(void *, Office::CalloutFormat * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::ConnectorFormat * *), 
HRESULT(__stdcall*)(void *, Office::FillFormat * *), 
HRESULT(__stdcall*)(void *, Office::GroupShapes * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::LineFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::ShapeNodes * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::PictureFormat * *), 
HRESULT(__stdcall*)(void *, Office::ShadowFormat * *), 
HRESULT(__stdcall*)(void *, Office::TextEffectFormat * *), 
HRESULT(__stdcall*)(void *, Office::TextFrame * *), 
HRESULT(__stdcall*)(void *, Office::ThreeDFormat * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoShapeType *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::Script * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::IMsoDiagram * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::CanvasShapes * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::TextFrame2 * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::IMsoChart * *), 
HRESULT(__stdcall*)(void *, Office::MsoShapeStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoShapeStyleIndex), 
HRESULT(__stdcall*)(void *, Office::MsoBackgroundStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoBackgroundStyleIndex), 
HRESULT(__stdcall*)(void *, Office::SoftEdgeFormat * *), 
HRESULT(__stdcall*)(void *, Office::GlowFormat * *), 
HRESULT(__stdcall*)(void *, Office::ReflectionFormat * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoMergeCmd, Office::Shape *), 
HRESULT(__stdcall*)(void *, Office::MsoGraphicStyleIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoGraphicStyleIndex), 
HRESULT(__stdcall*)(void *, Office::MsoPictureType, BSTR, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::Model3DFormat * *)> type;
};
template <>
struct falcon::define_interface<Office::Shapes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoConnectorType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoTriState, Office::MsoTriState, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect, BSTR, BSTR, float, Office::MsoTriState, Office::MsoTriState, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoEditingType, float, float, Office::FreeformBuilder * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoDiagramType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::XlChartType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, int, int, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtLayout *, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, int, Office::XlChartType, float, float, float, float, VARIANT_BOOL, Office::Shape * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoTriState, Office::MsoTriState, float, float, float, float, Office::MsoPictureCompress, Office::Shape * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoTriState, Office::MsoTriState, float, float, float, float, Office::Shape * *)> type;
};
template <>
struct falcon::define_interface<Office::TextEffectFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoTextEffectAlignment *), 
HRESULT(__stdcall*)(void *, Office::MsoTextEffectAlignment), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffectShape *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffectShape), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::TextFrame>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation)> type;
};
template <>
struct falcon::define_interface<Office::ThreeDFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetThreeDFormat), 
HRESULT(__stdcall*)(void *, Office::MsoPresetExtrusionDirection), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoExtrusionColorType *), 
HRESULT(__stdcall*)(void *, Office::MsoExtrusionColorType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoPresetExtrusionDirection *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetLightingDirection *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetLightingDirection), 
HRESULT(__stdcall*)(void *, Office::MsoPresetLightingSoftness *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetLightingSoftness), 
HRESULT(__stdcall*)(void *, Office::MsoPresetMaterial *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetMaterial), 
HRESULT(__stdcall*)(void *, Office::MsoPresetThreeDFormat *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoPresetCamera), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoLightRigType *), 
HRESULT(__stdcall*)(void *, Office::MsoLightRigType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoBevelType *), 
HRESULT(__stdcall*)(void *, Office::MsoBevelType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoBevelType *), 
HRESULT(__stdcall*)(void *, Office::MsoBevelType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoPresetCamera *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDispCagNotifySink>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IUnknown *, IUnknown *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::Balloon>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoBalloonType), 
HRESULT(__stdcall*)(void *, Office::MsoBalloonType *), 
HRESULT(__stdcall*)(void *, Office::MsoIconType), 
HRESULT(__stdcall*)(void *, Office::MsoIconType *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoModeType), 
HRESULT(__stdcall*)(void *, Office::MsoModeType *), 
HRESULT(__stdcall*)(void *, Office::MsoAnimationType), 
HRESULT(__stdcall*)(void *, Office::MsoAnimationType *), 
HRESULT(__stdcall*)(void *, Office::MsoButtonSetType), 
HRESULT(__stdcall*)(void *, Office::MsoButtonSetType *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, int, int, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoBalloonButtonType *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::BalloonCheckboxes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::BalloonCheckbox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::BalloonLabels>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::BalloonLabel>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::AnswerWizardFiles>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int, BSTR *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::AnswerWizard>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::AnswerWizardFiles * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::Assistant>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int, int), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, BSTR, LONG, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, LONG *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT_BOOL, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, Office::MsoWizardActType, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Balloon * *), 
HRESULT(__stdcall*)(void *, Office::MsoBalloonErrorType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::MsoAnimationType *), 
HRESULT(__stdcall*)(void *, Office::MsoAnimationType), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoAlertButtonType, Office::MsoAlertIconType, Office::MsoAlertDefaultType, Office::MsoAlertCancelType, VARIANT_BOOL, int *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
IDispatch *(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, BSTR), 
HRESULT(__stdcall*)(void *, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, Office::MsoDocProperties *), 
HRESULT(__stdcall*)(void *, LONG, Office::MsoDocProperties), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
IDispatch *(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, Office::DocumentProperty * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL, VARIANT, VARIANT, VARIANT, LONG, Office::DocumentProperty * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IFoundFiles>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, int, BSTR *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::IFind>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindOptions *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindView *), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindSortBy *), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindListBy *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::IFoundFiles * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindOptions), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindView), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindSortBy), 
HRESULT(__stdcall*)(void *, Office::MsoFileFindListBy), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Office::FoundFiles>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, LONG, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PropertyTest>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoCondition *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoConnector *)> type;
};
template <>
struct falcon::define_interface<Office::PropertyTests>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, LONG, Office::PropertyTest * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoCondition, VARIANT, VARIANT, Office::MsoConnector), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::FileSearch>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoFileType *), 
HRESULT(__stdcall*)(void *, Office::MsoFileType), 
HRESULT(__stdcall*)(void *, Office::MsoLastModified *), 
HRESULT(__stdcall*)(void *, Office::MsoLastModified), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoSortBy, Office::MsoSortOrder, VARIANT_BOOL, int *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::FoundFiles * *), 
HRESULT(__stdcall*)(void *, Office::PropertyTests * *), 
HRESULT(__stdcall*)(void *, Office::SearchScopes * *), 
HRESULT(__stdcall*)(void *, Office::SearchFolders * *), 
HRESULT(__stdcall*)(void *, Office::FileTypes * *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::COMAddIn>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::COMAddIns>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *, Office::COMAddIn * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::LanguageSettings>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoAppLanguageID, int *), 
HRESULT(__stdcall*)(void *, Office::MsoLanguageID, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ICommandBarsEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::ICommandBarComboBoxEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *, Office::_CommandBarComboBox *)> type;
};
template <>
struct falcon::define_interface<Office::ICommandBarButtonEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *, Office::_CommandBarButton *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::WebPageFont>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::WebPageFonts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoCharacterSet, Office::WebPageFont * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::HTMLProjectItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoHTMLProjectOpen), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::HTMLProjectItems>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *, Office::HTMLProjectItem * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::HTMLProject>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoHTMLProjectState *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::HTMLProjectItems * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoHTMLProjectOpen)> type;
};
template <>
struct falcon::define_interface<Office::MsoDebugOptions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::FileDialogSelectedItems>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::FileDialogFilter>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::FileDialogFilters>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::FileDialogFilter * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, VARIANT, Office::FileDialogFilter * *)> type;
};
template <>
struct falcon::define_interface<Office::FileDialog>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::FileDialogFilters * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::MsoFileDialogView *), 
HRESULT(__stdcall*)(void *, Office::MsoFileDialogView), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::FileDialogSelectedItems * *), 
HRESULT(__stdcall*)(void *, Office::MsoFileDialogType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::SignatureSet>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int, Office::Signature * *), 
HRESULT(__stdcall*)(void *, Office::Signature * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Signature * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Signature * *), 
HRESULT(__stdcall*)(void *, Office::MsoSignatureSubset *), 
HRESULT(__stdcall*)(void *, Office::MsoSignatureSubset), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::Signature>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, Office::SignatureInfo * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::SignatureSetup * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoEnvelopeVB>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::FileTypes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::MsoFileType *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoFileType), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::SearchFolders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::ScopeFolder * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::ScopeFolder *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::ScopeFolders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::ScopeFolder * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::ScopeFolder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::ScopeFolders * *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::SearchScope>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoSearchIn *), 
HRESULT(__stdcall*)(void *, Office::ScopeFolder * *)> type;
};
template <>
struct falcon::define_interface<Office::SearchScopes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::SearchScope * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDiagram>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNodes * *), 
HRESULT(__stdcall*)(void *, Office::MsoDiagramType *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoDiagramType), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::DiagramNodes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::DiagramNodeChildren>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::MsoDiagramNodeType, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *)> type;
};
template <>
struct falcon::define_interface<Office::DiagramNode>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoRelativeNodePosition, Office::MsoDiagramNodeType, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode *, Office::MsoRelativeNodePosition), 
HRESULT(__stdcall*)(void *, Office::DiagramNode *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Office::DiagramNode *, Office::MsoRelativeNodePosition, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNodeChildren * *), 
HRESULT(__stdcall*)(void *, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::DiagramNode * *), 
HRESULT(__stdcall*)(void *, Office::IMsoDiagram * *), 
HRESULT(__stdcall*)(void *, Office::MsoOrgChartLayoutType *), 
HRESULT(__stdcall*)(void *, Office::MsoOrgChartLayoutType), 
HRESULT(__stdcall*)(void *, Office::Shape * *)> type;
};
template <>
struct falcon::define_interface<Office::CanvasShapes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::MsoCalloutType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoConnectorType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoTriState, Office::MsoTriState, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect, BSTR, BSTR, float, Office::MsoTriState, Office::MsoTriState, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation, float, float, float, float, Office::Shape * *), 
HRESULT(__stdcall*)(void *, Office::MsoEditingType, float, float, Office::FreeformBuilder * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::Shape * *)> type;
};
template <>
struct falcon::define_interface<Office::OfficeDataSourceObject>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoMoveRow, int, int *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, LONG, LONG), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL, BSTR, VARIANT_BOOL, BSTR, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::ODSOColumn>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::ODSOColumns>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ODSOFilter>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoFilterComparison *), 
HRESULT(__stdcall*)(void *, Office::MsoFilterComparison), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoFilterConjunction *), 
HRESULT(__stdcall*)(void *, Office::MsoFilterConjunction)> type;
};
template <>
struct falcon::define_interface<Office::ODSOFilters>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoFilterComparison, Office::MsoFilterConjunction, BSTR, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::NewFile>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::WebComponent>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::WebComponentWindowExternal>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::WebComponent * *)> type;
};
template <>
struct falcon::define_interface<Office::WebComponentFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::ILicWizExternal>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, DATE, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, int, LONG *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG, LONG), 
HRESULT(__stdcall*)(void *, LONG, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::ILicValidator>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int)> type;
};
template <>
struct falcon::define_interface<Office::ILicAgent>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, ULONG, ULONG, BSTR, ULONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int, ULONG *), 
HRESULT(__stdcall*)(void *, BSTR, int *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, ULONG, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, ULONG *), 
HRESULT(__stdcall*)(void *, BSTR, int *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, ULONG, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, ULONG, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG, ULONG, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoEServicesDialog>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::WebComponentProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::SmartDocument>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceMember>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceMembers>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int, Office::SharedWorkspaceMember * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, VARIANT, Office::SharedWorkspaceMember * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceTask>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoSharedWorkspaceTaskStatus *), 
HRESULT(__stdcall*)(void *, Office::MsoSharedWorkspaceTaskStatus), 
HRESULT(__stdcall*)(void *, Office::MsoSharedWorkspaceTaskPriority *), 
HRESULT(__stdcall*)(void *, Office::MsoSharedWorkspaceTaskPriority), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceTasks>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::SharedWorkspaceTask * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, Office::SharedWorkspaceTask * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceFile>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceFiles>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int, Office::SharedWorkspaceFile * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, Office::SharedWorkspaceFile * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceFolder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceFolders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int, Office::SharedWorkspaceFolder * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Office::SharedWorkspaceFolder * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceLink>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspaceLinks>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int, Office::SharedWorkspaceLink * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, Office::SharedWorkspaceLink * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::SharedWorkspace>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::SharedWorkspaceMembers * *), 
HRESULT(__stdcall*)(void *, Office::SharedWorkspaceTasks * *), 
HRESULT(__stdcall*)(void *, Office::SharedWorkspaceFiles * *), 
HRESULT(__stdcall*)(void *, Office::SharedWorkspaceFolders * *), 
HRESULT(__stdcall*)(void *, Office::SharedWorkspaceLinks * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::Sync>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoSyncStatusType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoSyncErrorType *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoSyncVersionType), 
HRESULT(__stdcall*)(void *, Office::MsoSyncConflictResolutionType), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentLibraryVersion>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentLibraryVersions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::DocumentLibraryVersion * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::UserPermission>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::Permission>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::UserPermission * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, Office::UserPermission * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::MsoDebugOptions_UTRunResult>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::MsoDebugOptions_UT>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoDebugOptions_UTRunResult * *)> type;
};
template <>
struct falcon::define_interface<Office::MsoDebugOptions_UTs>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::MsoDebugOptions_UT * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MsoDebugOptions_UTs * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoDebugOptions_UT * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoDebugOptions_UTs * *)> type;
};
template <>
struct falcon::define_interface<Office::MsoDebugOptions_UTManager>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoDebugOptions_UTs * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::MetaProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::MsoMetaPropertyType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::MetaProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::MetaProperty * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::MetaProperty * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PolicyItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ServerPolicy>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::PolicyItem * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentInspector>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoDocInspectorStatus *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoDocInspectorStatus *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::DocumentInspectors>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int, Office::DocumentInspector * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::WorkflowTask>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::WorkflowTasks>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::WorkflowTask * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::WorkflowTemplate>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::WorkflowTemplates>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::WorkflowTemplate * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::IDocumentInspector>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch *, Office::MsoDocInspectorStatus *, BSTR *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch *, LONG, Office::MsoDocInspectorStatus *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::SignatureSetup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::SignatureInfo>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, Picture), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::SignatureDetail, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::CertificateDetail, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ContentVerificationResults *), 
HRESULT(__stdcall*)(void *, Office::CertificateVerificationResults *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::SignatureProvider>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Office::SignatureLineImage, Office::SignatureSetup *, Office::SignatureInfo *, IUnknown *, Picture), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *, Office::SignatureInfo *), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *, Office::SignatureInfo *, IUnknown *), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *, Office::SignatureInfo *), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *, Office::SignatureInfo *, IUnknown *, Office::ContentVerificationResults *, Office::CertificateVerificationResults *), 
HRESULT(__stdcall*)(void *, IUnknown *, Office::SignatureSetup *, Office::SignatureInfo *, IUnknown *, Office::ContentVerificationResults *, Office::CertificateVerificationResults *), 
HRESULT(__stdcall*)(void *, Office::SignatureProviderDetail, VARIANT *), 
HRESULT(__stdcall*)(void *, IUnknown *, IUnknown *, SAFEARRAY * *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLPrefixMapping>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLPrefixMappings>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::CustomXMLPrefixMapping * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLSchema>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::_CustomXMLSchemaCollection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::CustomXMLSchema * *), 
HRESULT(__stdcall*)(void *, LONG, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, VARIANT_BOOL, Office::CustomXMLSchema * *), 
HRESULT(__stdcall*)(void *, Office::_CustomXMLSchemaCollection *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLNodes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLNode>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNodes * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNodes * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, Office::MsoCustomXMLNodeType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::_CustomXMLPart * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoCustomXMLNodeType, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoCustomXMLNodeType, BSTR, Office::CustomXMLNode *), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNode *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode *, BSTR, BSTR, Office::MsoCustomXMLNodeType, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNode *), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNodes * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNode * *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLValidationError>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoCustomXMLValidationErrorType *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::CustomXMLValidationErrors>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::CustomXMLValidationError * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode *, BSTR, BSTR, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::_CustomXMLPart>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::_CustomXMLSchemaCollection * *), 
HRESULT(__stdcall*)(void *, Office::_CustomXMLSchemaCollection *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLPrefixMappings * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLNode *, BSTR, BSTR, Office::CustomXMLNode *, Office::MsoCustomXMLNodeType, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNodes * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::CustomXMLNode * *), 
HRESULT(__stdcall*)(void *, Office::CustomXMLValidationErrors * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::ICustomXMLPartEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *, Office::CustomXMLNode *, VARIANT_BOOL), 
void(__stdcall*)(void *, Office::CustomXMLNode *, Office::CustomXMLNode *, Office::CustomXMLNode *, VARIANT_BOOL), 
void(__stdcall*)(void *, Office::CustomXMLNode *, Office::CustomXMLNode *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::_CustomXMLParts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::_CustomXMLPart * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Office::_CustomXMLPart * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::_CustomXMLPart * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::_CustomXMLParts * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::ICustomXMLPartsEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *, Office::_CustomXMLPart *), 
void(__stdcall*)(void *, Office::_CustomXMLPart *), 
void(__stdcall*)(void *, Office::_CustomXMLPart *)> type;
};
template <>
struct falcon::define_interface<Office::GradientStop>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::GradientStops>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::GradientStop * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, LONG, float, float, int), 
HRESULT(__stdcall*)(void *, LONG, float, float, int, float)> type;
};
template <>
struct falcon::define_interface<Office::SoftEdgeFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoSoftEdgeType *), 
HRESULT(__stdcall*)(void *, Office::MsoSoftEdgeType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::GlowFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::ReflectionFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoReflectionType *), 
HRESULT(__stdcall*)(void *, Office::MsoReflectionType), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::ParagraphFormat2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoParagraphAlignment *), 
HRESULT(__stdcall*)(void *, Office::MsoParagraphAlignment), 
HRESULT(__stdcall*)(void *, Office::MsoBaselineAlignment *), 
HRESULT(__stdcall*)(void *, Office::MsoBaselineAlignment), 
HRESULT(__stdcall*)(void *, Office::BulletFormat2 * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::TabStops2 * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextDirection *), 
HRESULT(__stdcall*)(void *, Office::MsoTextDirection), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState)> type;
};
template <>
struct falcon::define_interface<Office::Font2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTextStrike *), 
HRESULT(__stdcall*)(void *, Office::MsoTextStrike), 
HRESULT(__stdcall*)(void *, Office::MsoTextCaps *), 
HRESULT(__stdcall*)(void *, Office::MsoTextCaps), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTextUnderlineType *), 
HRESULT(__stdcall*)(void *, Office::MsoTextUnderlineType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::FillFormat * *), 
HRESULT(__stdcall*)(void *, Office::GlowFormat * *), 
HRESULT(__stdcall*)(void *, Office::ReflectionFormat * *), 
HRESULT(__stdcall*)(void *, Office::LineFormat * *), 
HRESULT(__stdcall*)(void *, Office::ShadowFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoSoftEdgeType *), 
HRESULT(__stdcall*)(void *, Office::MsoSoftEdgeType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::TextColumn2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTextDirection *), 
HRESULT(__stdcall*)(void *, Office::MsoTextDirection)> type;
};
template <>
struct falcon::define_interface<Office::TextRange2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, Office::ParagraphFormat2 * *), 
HRESULT(__stdcall*)(void *, Office::Font2 * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, BSTR, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, BSTR, int, Office::MsoTriState, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, Office::MsoClipboardFormat, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, Office::MsoTextChangeCase), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, int, Office::MsoTriState, Office::MsoTriState, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, int, Office::MsoTriState, Office::MsoTriState, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, float *, float *, float *, float *, float *, float *, float *, float *), 
HRESULT(__stdcall*)(void *, Office::MsoLanguageID *), 
HRESULT(__stdcall*)(void *, Office::MsoLanguageID), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int, int, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, Office::MsoChartFieldType, BSTR, int, Office::TextRange2 * *)> type;
};
template <>
struct falcon::define_interface<Office::TextFrame2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation *), 
HRESULT(__stdcall*)(void *, Office::MsoTextOrientation), 
HRESULT(__stdcall*)(void *, Office::MsoHorizontalAnchor *), 
HRESULT(__stdcall*)(void *, Office::MsoHorizontalAnchor), 
HRESULT(__stdcall*)(void *, Office::MsoVerticalAnchor *), 
HRESULT(__stdcall*)(void *, Office::MsoVerticalAnchor), 
HRESULT(__stdcall*)(void *, Office::MsoPathFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoPathFormat), 
HRESULT(__stdcall*)(void *, Office::MsoWarpFormat *), 
HRESULT(__stdcall*)(void *, Office::MsoWarpFormat), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect *), 
HRESULT(__stdcall*)(void *, Office::MsoPresetTextEffect), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoAutoSize *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoSize), 
HRESULT(__stdcall*)(void *, Office::ThreeDFormat * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::TextRange2 * *), 
HRESULT(__stdcall*)(void *, Office::TextColumn2 * *), 
HRESULT(__stdcall*)(void *, Office::Ruler2 * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState)> type;
};
template <>
struct falcon::define_interface<Office::ThemeColor>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorSchemeIndex *)> type;
};
template <>
struct falcon::define_interface<Office::ThemeColorScheme>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorSchemeIndex, Office::ThemeColor * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, LONG)> type;
};
template <>
struct falcon::define_interface<Office::ThemeFont>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ThemeFonts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoFontLanguageIndex, Office::ThemeFont * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::ThemeFontScheme>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::ThemeFonts * *), 
HRESULT(__stdcall*)(void *, Office::ThemeFonts * *)> type;
};
template <>
struct falcon::define_interface<Office::ThemeEffectScheme>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::OfficeTheme>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::ThemeColorScheme * *), 
HRESULT(__stdcall*)(void *, Office::ThemeFontScheme * *), 
HRESULT(__stdcall*)(void *, Office::ThemeEffectScheme * *)> type;
};
template <>
struct falcon::define_interface<Office::_CustomTaskPane>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoCTPDockPosition *), 
HRESULT(__stdcall*)(void *, Office::MsoCTPDockPosition), 
HRESULT(__stdcall*)(void *, Office::MsoCTPDockPositionRestrict *), 
HRESULT(__stdcall*)(void *, Office::MsoCTPDockPositionRestrict), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::CustomTaskPaneEvents>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
void(__stdcall*)(void *, Office::_CustomTaskPane *), 
void(__stdcall*)(void *, Office::_CustomTaskPane *)> type;
};
template <>
struct falcon::define_interface<Office::ICTPFactory>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, VARIANT, Office::_CustomTaskPane * *)> type;
};
template <>
struct falcon::define_interface<Office::ICustomTaskPaneConsumer>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Office::ICTPFactory *)> type;
};
template <>
struct falcon::define_interface<Office::IRibbonUI>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::IRibbonControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::IRibbonExtensibility>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::IAssistance>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChartData>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChart>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartTitle * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlDisplayBlanksAs), 
HRESULT(__stdcall*)(void *, Office::XlDisplayBlanksAs *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::IMsoCorners * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlChartType *), 
HRESULT(__stdcall*)(void *, Office::XlChartType), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlChartType, VARIANT), 
HRESULT(__stdcall*)(void *, LONG, LONG, LONG *, LONG *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlRowCol *), 
HRESULT(__stdcall*)(void *, Office::XlRowCol), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoLegend * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::XlAxisGroup, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Office::IMsoWalls * *), 
HRESULT(__stdcall*)(void *, Office::IMsoFloor * *), 
HRESULT(__stdcall*)(void *, Office::IMsoPlotArea * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoChartArea * *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, LONG), 
HRESULT(__stdcall*)(void *, int, int, int, LONG), 
HRESULT(__stdcall*)(void *, Office::IMsoDataTable * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, LONG *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG), 
HRESULT(__stdcall*)(void *, Office::XlBarShape *), 
HRESULT(__stdcall*)(void *, Office::XlBarShape), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::IMsoWalls * *), 
HRESULT(__stdcall*)(void *, Office::IMsoWalls * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoChartElementType), 
HRESULT(__stdcall*)(void *, Office::IMsoChartData * *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, Office::Shapes * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT, LONG, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlCategoryLabelLevel), 
HRESULT(__stdcall*)(void *, Office::XlCategoryLabelLevel *), 
HRESULT(__stdcall*)(void *, Office::XlSeriesNameLevel), 
HRESULT(__stdcall*)(void *, Office::XlSeriesNameLevel *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::IMsoCorners>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoLegend>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlLegendPosition *), 
HRESULT(__stdcall*)(void *, Office::XlLegendPosition), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoBorder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoWalls>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoFloor>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoPlotArea>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition *), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChartArea>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoSeriesLines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoLeaderLines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::GridLines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoUpBars>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDownBars>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoInterior>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ChartFillFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, int, int, float), 
HRESULT(__stdcall*)(void *, int, int), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, int, int, int), 
HRESULT(__stdcall*)(void *, Office::ChartColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::ChartColorFormat * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::LegendEntries>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::LegendEntry * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::LegendEntry * *)> type;
};
template <>
struct falcon::define_interface<Office::ChartFont>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::ChartColorFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::LegendEntry>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::IMsoLegendKey * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoLegendKey>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle *), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double)> type;
};
template <>
struct falcon::define_interface<Office::SeriesCollection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::XlRowCol, VARIANT, VARIANT, VARIANT, Office::IMsoSeries * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoSeries * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::XlRowCol, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoSeries * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoSeries * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoSeries>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlAxisGroup *), 
HRESULT(__stdcall*)(void *, Office::XlAxisGroup), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlErrorBarDirection, Office::XlErrorBarInclude, Office::XlErrorBarType, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoErrorBars * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle *), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlChartPictureType *), 
HRESULT(__stdcall*)(void *, Office::XlChartPictureType), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlChartType *), 
HRESULT(__stdcall*)(void *, Office::XlChartType), 
HRESULT(__stdcall*)(void *, Office::XlChartType), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlBarShape *), 
HRESULT(__stdcall*)(void *, Office::XlBarShape), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoLeaderLines * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlParentDataLabelOptions *), 
HRESULT(__stdcall*)(void *, Office::XlParentDataLabelOptions), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlValueSortOrder *), 
HRESULT(__stdcall*)(void *, Office::XlValueSortOrder), 
HRESULT(__stdcall*)(void *, Office::XlGeoProjectionType *), 
HRESULT(__stdcall*)(void *, Office::XlGeoProjectionType), 
HRESULT(__stdcall*)(void *, Office::XlGeoMappingLevel *), 
HRESULT(__stdcall*)(void *, Office::XlGeoMappingLevel), 
HRESULT(__stdcall*)(void *, Office::XlRegionLabelOptions *), 
HRESULT(__stdcall*)(void *, Office::XlRegionLabelOptions), 
HRESULT(__stdcall*)(void *, Office::XlSeriesColorGradientStyle *), 
HRESULT(__stdcall*)(void *, Office::XlSeriesColorGradientStyle), 
HRESULT(__stdcall*)(void *, Office::SeriesGradientStopData * *), 
HRESULT(__stdcall*)(void *, Office::SeriesGradientStopData * *), 
HRESULT(__stdcall*)(void *, Office::SeriesGradientStopData * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoErrorBars>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlEndStyleCap *), 
HRESULT(__stdcall*)(void *, Office::XlEndStyleCap), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoTrendline>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoDataLabel * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlTrendlineType *), 
HRESULT(__stdcall*)(void *, Office::XlTrendlineType), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::Trendlines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlTrendlineType, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, Office::IMsoTrendline * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoTrendline * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoTrendline * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDataLabels>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::IMsoCharacters * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelPosition *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelPosition), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoDataLabel * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoDataLabel * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDataLabel>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::IMsoCharacters * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelPosition *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelPosition), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::Points>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::ChartPoint * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Office::ChartPoint * *)> type;
};
template <>
struct falcon::define_interface<Office::ChartPoint>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoDataLabel * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex *), 
HRESULT(__stdcall*)(void *, Office::XlColorIndex), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle *), 
HRESULT(__stdcall*)(void *, Office::XlMarkerStyle), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlChartPictureType *), 
HRESULT(__stdcall*)(void *, Office::XlChartPictureType), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, Office::XlDataLabelsType, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, Office::XlPieSliceLocation, Office::XlPieSliceIndex, double *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::Axes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::XlAxisType, Office::XlAxisGroup, Office::IMsoAxis * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::XlAxisType, Office::XlAxisGroup, Office::IMsoAxis * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoAxis>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlAxisGroup *), 
HRESULT(__stdcall*)(void *, Office::IMsoAxisTitle * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlAxisCrosses *), 
HRESULT(__stdcall*)(void *, Office::XlAxisCrosses), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::GridLines * *), 
HRESULT(__stdcall*)(void *, Office::XlTickMark *), 
HRESULT(__stdcall*)(void *, Office::XlTickMark), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::GridLines * *), 
HRESULT(__stdcall*)(void *, Office::XlTickMark *), 
HRESULT(__stdcall*)(void *, Office::XlTickMark), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlScaleType *), 
HRESULT(__stdcall*)(void *, Office::XlScaleType), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::XlTickLabelPosition *), 
HRESULT(__stdcall*)(void *, Office::XlTickLabelPosition), 
HRESULT(__stdcall*)(void *, Office::IMsoTickLabels * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::XlAxisType *), 
HRESULT(__stdcall*)(void *, Office::XlAxisType), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit *), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit *), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit *), 
HRESULT(__stdcall*)(void *, Office::XlTimeUnit), 
HRESULT(__stdcall*)(void *, Office::XlCategoryType *), 
HRESULT(__stdcall*)(void *, Office::XlCategoryType), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, Office::XlDisplayUnit *), 
HRESULT(__stdcall*)(void *, Office::XlDisplayUnit), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoDisplayUnitLabel * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlCategorySortOrder), 
HRESULT(__stdcall*)(void *, Office::XlCategorySortOrder *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDataTable>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChartTitle>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::IMsoCharacters * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition *), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoAxisTitle>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::IMsoCharacters * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition *), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDisplayUnitLabel>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Office::IMsoCharacters * *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoInterior * *), 
HRESULT(__stdcall*)(void *, Office::ChartFillFormat * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition *), 
HRESULT(__stdcall*)(void *, Office::XlChartElementPosition), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoTickLabels>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Office::XlTickLabelOrientation *), 
HRESULT(__stdcall*)(void *, Office::XlTickLabelOrientation), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoHyperlinks>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoDropLines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoHiLoLines>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IMsoBorder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IMsoChartFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChartGroup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::IMsoDownBars * *), 
HRESULT(__stdcall*)(void *, Office::IMsoDropLines * *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::IMsoHiLoLines * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IMsoSeriesLines * *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::IMsoUpBars * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::XlSizeRepresents *), 
HRESULT(__stdcall*)(void *, Office::XlSizeRepresents), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Office::XlChartSplitType), 
HRESULT(__stdcall*)(void *, Office::XlChartSplitType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::XlBinsType *), 
HRESULT(__stdcall*)(void *, Office::XlBinsType), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, double *), 
HRESULT(__stdcall*)(void *, double)> type;
};
template <>
struct falcon::define_interface<Office::ChartGroups>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoChartGroup * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoCharacters>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::ChartFont * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoChartFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Office::FillFormat * *), 
HRESULT(__stdcall*)(void *, Office::GlowFormat * *), 
HRESULT(__stdcall*)(void *, Office::LineFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::PictureFormat * *), 
HRESULT(__stdcall*)(void *, Office::ShadowFormat * *), 
HRESULT(__stdcall*)(void *, Office::SoftEdgeFormat * *), 
HRESULT(__stdcall*)(void *, Office::TextFrame2 * *), 
HRESULT(__stdcall*)(void *, Office::ThreeDFormat * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::Adjustments * *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType *), 
HRESULT(__stdcall*)(void *, Office::MsoAutoShapeType)> type;
};
template <>
struct falcon::define_interface<Office::BulletFormat2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::Font2 * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, Office::MsoNumberedBulletStyle *), 
HRESULT(__stdcall*)(void *, Office::MsoNumberedBulletStyle), 
HRESULT(__stdcall*)(void *, Office::MsoBulletType *), 
HRESULT(__stdcall*)(void *, Office::MsoBulletType), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState)> type;
};
template <>
struct falcon::define_interface<Office::TabStops2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::TabStop2 * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoTabStopType, float, Office::TabStop2 * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::TabStop2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoTabStopType *), 
HRESULT(__stdcall*)(void *, Office::MsoTabStopType)> type;
};
template <>
struct falcon::define_interface<Office::Ruler2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::RulerLevels2 * *), 
HRESULT(__stdcall*)(void *, Office::TabStops2 * *)> type;
};
template <>
struct falcon::define_interface<Office::RulerLevels2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::RulerLevel2 * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::RulerLevel2>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::EncryptionProvider>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Office::EncryptionProviderDetail, VARIANT *), 
HRESULT(__stdcall*)(void *, IUnknown *, int *), 
HRESULT(__stdcall*)(void *, IUnknown *, IUnknown *, UINT *, int *), 
HRESULT(__stdcall*)(void *, int, int *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int, IUnknown *, int *), 
HRESULT(__stdcall*)(void *, int, BSTR, IUnknown *, IUnknown *), 
HRESULT(__stdcall*)(void *, int, BSTR, IUnknown *, IUnknown *), 
HRESULT(__stdcall*)(void *, int, IUnknown *, VARIANT_BOOL, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::IBlogExtensibility>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *, BSTR *, Office::MsoBlogCategorySupport *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, VARIANT_BOOL, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, SAFEARRAY * *, SAFEARRAY * *, SAFEARRAY * *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, SAFEARRAY * *, SAFEARRAY * *, SAFEARRAY * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, LONG, BSTR *, BSTR *, BSTR *, SAFEARRAY * *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, BSTR, BSTR, BSTR, SAFEARRAY *, VARIANT_BOOL, BSTR *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, BSTR, BSTR, BSTR, BSTR, SAFEARRAY *, VARIANT_BOOL, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, SAFEARRAY * *)> type;
};
template <>
struct falcon::define_interface<Office::IBlogPictureExtensibility>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, LONG, IDispatch *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, IDispatch *, IUnknown *, BSTR *, LONG)> type;
};
template <>
struct falcon::define_interface<Office::IConverterPreferences>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::IConverterApplicationPreferences>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, ULONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::IConverterUICallback>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, UINT, int *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR *, int)> type;
};
template <>
struct falcon::define_interface<Office::IConverter>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::IConverterApplicationPreferences *, Office::IConverterPreferences * *, Office::IConverterUICallback *), 
HRESULT(__stdcall*)(void *, Office::IConverterUICallback *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::IConverterApplicationPreferences *, Office::IConverterPreferences * *, Office::IConverterUICallback *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, Office::IConverterApplicationPreferences *, Office::IConverterPreferences * *, Office::IConverterUICallback *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR *, Office::IConverterApplicationPreferences *, Office::IConverterPreferences * *, Office::IConverterUICallback *), 
HRESULT(__stdcall*)(void *, LONG, BSTR *, Office::IConverterApplicationPreferences *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArt>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtNodes * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtNodes * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtLayout * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtLayout *), 
HRESULT(__stdcall*)(void *, Office::SmartArtQuickStyle * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtQuickStyle *), 
HRESULT(__stdcall*)(void *, Office::SmartArtColor * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtColor *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtNodes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::SmartArtNode * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::SmartArtNode * *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtNode>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoSmartArtNodePosition, Office::MsoSmartArtNodeType, Office::SmartArtNode * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoOrgChartLayoutType *), 
HRESULT(__stdcall*)(void *, Office::MsoOrgChartLayoutType), 
HRESULT(__stdcall*)(void *, Office::ShapeRange * *), 
HRESULT(__stdcall*)(void *, Office::TextFrame2 * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::SmartArtNodes * *), 
HRESULT(__stdcall*)(void *, Office::SmartArtNode * *), 
HRESULT(__stdcall*)(void *, Office::MsoSmartArtNodeType *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtLayouts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::SmartArtLayout * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtLayout>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtQuickStyles>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::SmartArtQuickStyle * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtQuickStyle>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtColors>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::SmartArtColor * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, int *)> type;
};
template <>
struct falcon::define_interface<Office::SmartArtColor>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Office::PickerField>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoPickerField *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Office::PickerFields>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::PickerField * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PickerProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::MsoPickerField *)> type;
};
template <>
struct falcon::define_interface<Office::PickerProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::PickerProperty * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, Office::MsoPickerField, Office::PickerProperty * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PickerResult>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Office::PickerFields * *), 
HRESULT(__stdcall*)(void *, Office::PickerFields *)> type;
};
template <>
struct falcon::define_interface<Office::PickerResults>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::PickerResult * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, BSTR, VARIANT, VARIANT, Office::PickerResult * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PickerDialog>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::PickerProperties * *), 
HRESULT(__stdcall*)(void *, Office::PickerResults * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Office::PickerResults *, Office::PickerResults * *), 
HRESULT(__stdcall*)(void *, BSTR, int, Office::PickerResults * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoContactCard>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::MsoContactCardAddressType *), 
HRESULT(__stdcall*)(void *, Office::MsoContactCardType *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Office::EffectParameter>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Office::EffectParameters>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::EffectParameter * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Office::PictureEffect>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Office::MsoPictureEffectType *), 
HRESULT(__stdcall*)(void *, int), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::EffectParameters * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *)> type;
};
template <>
struct falcon::define_interface<Office::PictureEffects>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, int, Office::PictureEffect * *), 
HRESULT(__stdcall*)(void *, int *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Office::MsoPictureEffectType, int, Office::PictureEffect * *), 
HRESULT(__stdcall*)(void *, int)> type;
};
template <>
struct falcon::define_interface<Office::Crop>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Office::ContactCard>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::MsoContactCardStyle, LONG, LONG, LONG, LONG, LONG, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::FullSeriesCollection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoSeries * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoSeries * *)> type;
};
template <>
struct falcon::define_interface<Office::IMsoCategory>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Office::CategoryCollection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoCategory * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Office::IMsoCategory * *)> type;
};
template <>
struct falcon::define_interface<Office::SeriesGradientStopColorFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorIndex *), 
HRESULT(__stdcall*)(void *, Office::MsoThemeColorIndex), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, Office::MsoColorType *)> type;
};
template <>
struct falcon::define_interface<Office::SeriesGradientStopData>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::SeriesGradientStopColorFormat * *), 
HRESULT(__stdcall*)(void *, Office::XlGradientStopPositionType *), 
HRESULT(__stdcall*)(void *, Office::XlGradientStopPositionType), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Office::Model3DFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState *), 
HRESULT(__stdcall*)(void *, Office::MsoTriState), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float *), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float), 
HRESULT(__stdcall*)(void *, float)> type;
};
template <>
struct falcon::define_interface<Outlook::_IRecipientControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, char *), 
HRESULT(__stdcall*)(void *, char), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, char *), 
HRESULT(__stdcall*)(void *, char), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_IDocSiteControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, char *), 
HRESULT(__stdcall*)(void *, char), 
HRESULT(__stdcall*)(void *, char *), 
HRESULT(__stdcall*)(void *, char)> type;
};
template <>
struct falcon::define_interface<Outlook::OlkControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlHorizontalLayout *), 
HRESULT(__stdcall*)(void *, Outlook::OlHorizontalLayout), 
HRESULT(__stdcall*)(void *, Outlook::OlVerticalLayout *), 
HRESULT(__stdcall*)(void *, Outlook::OlVerticalLayout)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkTextBox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle), 
HRESULT(__stdcall*)(void *, Outlook::OlDragBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlDragBehavior), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlScrollBars *), 
HRESULT(__stdcall*)(void *, Outlook::OlScrollBars), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkLabel>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkCommandButton>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlPictureAlignment *), 
HRESULT(__stdcall*)(void *, Outlook::OlPictureAlignment), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkCheckBox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkOptionButton>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkComboBox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle), 
HRESULT(__stdcall*)(void *, Outlook::OlDragBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlDragBehavior), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlComboBoxStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlComboBoxStyle), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkListBox>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlMatchEntry *), 
HRESULT(__stdcall*)(void *, Outlook::OlMatchEntry), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, Outlook::OlMultiSelect *), 
HRESULT(__stdcall*)(void *, Outlook::OlMultiSelect), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, BSTR *), 
HRESULT(__stdcall*)(void *, LONG, BSTR), 
HRESULT(__stdcall*)(void *, LONG, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkInfoBar>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkContactPhoto>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkBusinessCardControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkPageControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::OlPageType *), 
HRESULT(__stdcall*)(void *, Outlook::OlPageType)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkDateControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkTimeControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior *), 
HRESULT(__stdcall*)(void *, Outlook::OlEnterFieldBehavior), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlTimeStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlTimeStyle), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlTextAlign), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkCategory>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBackStyle), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkFrameHeader>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlignment), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Font * *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkSenderPhoto>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TimeZone>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Application>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::Assistant * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Explorer * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlItemType, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Office::COMAddIns * *), 
HRESULT(__stdcall*)(void *, Outlook::_Explorers * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspectors * *), 
HRESULT(__stdcall*)(void *, Office::LanguageSettings * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Office::AnswerWizard * *), 
HRESULT(__stdcall*)(void *, Office::MsoFeatureInstall *), 
HRESULT(__stdcall*)(void *, Office::MsoFeatureInstall), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, Outlook::Search * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, Outlook::_Reminders * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch *, Outlook::OlReferenceType, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::IAssistance * *), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZones * *), 
HRESULT(__stdcall*)(void *, Office::PickerDialog * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Office::MsoDebugOptions * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NameSpace>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, Outlook::_Folders * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressLists * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultFolders, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, Outlook::Recipient *, Outlook::OlDefaultFolders, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::SyncObjects * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Outlook::OlExchangeConnectionMode *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::OlStoreType), 
HRESULT(__stdcall*)(void *, Outlook::_Accounts * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Stores * *), 
HRESULT(__stdcall*)(void *, Outlook::_SelectNamesDialog * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_Store * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressList * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Store * *), 
HRESULT(__stdcall*)(void *, Outlook::_Categories * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, VARIANT, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, BSTR, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Outlook::_SharingItem * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlAutoDiscoverConnectionMode *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry *, Office::ContactCard * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Recipient>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlDisplayType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Outlook::OlResponseStatus *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlTrackingStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlTrackingStatus), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, DATE, LONG, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::AddressEntry>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlDisplayType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, DATE, LONG, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_ContactItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeUser * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAddressEntryUserType *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeDistributionList * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *)> type;
};
template <>
struct falcon::define_interface<Outlook::AddressEntries>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_ContactItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlGender *), 
HRESULT(__stdcall*)(void *, Outlook::OlGender), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlMailingAddress *), 
HRESULT(__stdcall*)(void *, Outlook::OlMailingAddress), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlContactPhoneNumber), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlBusinessCardType *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::OlMailingAddress)> type;
};
template <>
struct falcon::define_interface<Outlook::Actions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Action * *), 
HRESULT(__stdcall*)(void *, Outlook::Action * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::Action>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlActionCopyLike *), 
HRESULT(__stdcall*)(void *, Outlook::OlActionCopyLike), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlActionReplyStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlActionReplyStyle), 
HRESULT(__stdcall*)(void *, Outlook::OlActionResponseStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlActionResponseStyle), 
HRESULT(__stdcall*)(void *, Outlook::OlActionShowOn *), 
HRESULT(__stdcall*)(void *, Outlook::OlActionShowOn), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Attachments>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Attachment * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT, Outlook::Attachment * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::Attachment>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlAttachmentType *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Outlook::OlAttachmentBlockLevel *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_PropertyAccessor>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, DATE, DATE *), 
HRESULT(__stdcall*)(void *, DATE, DATE *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Outlook::FormDescription>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlFormRegistry, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_Inspector>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::_CommandBars * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlEditorType *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlWindowState *), 
HRESULT(__stdcall*)(void *, Outlook::OlWindowState), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, IDispatch *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_AttachmentSelection * *), 
HRESULT(__stdcall*)(void *, DATE)> type;
};
template <>
struct falcon::define_interface<Outlook::_AttachmentSelection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Attachment * *), 
HRESULT(__stdcall*)(void *, Outlook::OlSelectionLocation *), 
HRESULT(__stdcall*)(void *, Outlook::OlSelectionContents, Outlook::Selection * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Selection>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlSelectionLocation *), 
HRESULT(__stdcall*)(void *, Outlook::OlSelectionContents, Outlook::Selection * *)> type;
};
template <>
struct falcon::define_interface<Outlook::UserProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::UserProperty * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlUserPropertyType, VARIANT, VARIANT, Outlook::UserProperty * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::UserProperty * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::UserProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlUserPropertyType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Outlook::MAPIFolder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlItemType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Folders * *), 
HRESULT(__stdcall*)(void *, Outlook::_Items * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Explorer * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::View * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_Views * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlShowItemCount *), 
HRESULT(__stdcall*)(void *, Outlook::OlShowItemCount), 
HRESULT(__stdcall*)(void *, Outlook::_Store * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlStorageIdentifierType, Outlook::_StorageItem * *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, Outlook::_Table * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_CalendarSharing * *), 
HRESULT(__stdcall*)(void *, Outlook::_UserDefinedProperties * *), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Folders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_Items>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Items * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_Explorer>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Office::_CommandBars * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::Panes * *), 
HRESULT(__stdcall*)(void *, Outlook::Selection * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlWindowState *), 
HRESULT(__stdcall*)(void *, Outlook::OlWindowState), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::OlPane, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlPane, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationPane * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlSearchScope), 
HRESULT(__stdcall*)(void *, IDispatch *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch *), 
HRESULT(__stdcall*)(void *, IDispatch *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_AccountSelector * *), 
HRESULT(__stdcall*)(void *, Outlook::_AttachmentSelection * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDisplayMode *), 
HRESULT(__stdcall*)(void *, Outlook::_PreviewPane * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Panes>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationPane>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationModule * *), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationModule *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationModules * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationModules>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_NavigationModule * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType, Outlook::_NavigationModule * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_AccountSelector>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Account>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAccountType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlAutoDiscoverConnectionMode *), 
HRESULT(__stdcall*)(void *, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Store * *), 
HRESULT(__stdcall*)(void *, Outlook::OlExchangeConnectionMode *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Store>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlExchangeStoreType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::_Folders * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, Outlook::_Rules * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::OlSpecialFolders, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultFolders, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_Categories * *), 
HRESULT(__stdcall*)(void *, BSTR, BSTR, BSTR, VARIANT_BOOL, Outlook::OlUnifiedGroupType, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_Rules>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Rule * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlRuleType, Outlook::_Rule * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_Rule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleType *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::_RuleActions * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleConditions * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleConditions * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_RuleActions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_MoveOrCopyRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_MoveOrCopyRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_SendRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_SendRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_SendRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_SendRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_AssignToCategoryRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_PlaySoundRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_MarkAsTaskRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_NewItemAlertRuleAction * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleAction * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_RuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *)> type;
};
template <>
struct falcon::define_interface<Outlook::_MoveOrCopyRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *)> type;
};
template <>
struct falcon::define_interface<Outlook::_SendRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Recipients>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Outlook::_AssignToCategoryRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_PlaySoundRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_MarkAsTaskRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval *), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval)> type;
};
template <>
struct falcon::define_interface<Outlook::_NewItemAlertRuleAction>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleActionType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_RuleConditions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_ImportanceRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_AccountRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_TextRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_TextRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_CategoryRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_FormNameRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_ToOrFromRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_TextRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_AddressRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_AddressRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_SenderInAddressListRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_TextRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_ToOrFromRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_RuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_FromRssFeedRuleCondition * *), 
HRESULT(__stdcall*)(void *, Outlook::_SensitivityRuleCondition * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_RuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ImportanceRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance)> type;
};
template <>
struct falcon::define_interface<Outlook::_AccountRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TextRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_CategoryRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_FormNameRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_ToOrFromRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_AddressRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_SenderInAddressListRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, Outlook::AddressList * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressList *)> type;
};
template <>
struct falcon::define_interface<Outlook::AddressList>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAddressListType *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_FromRssFeedRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_SensitivityRuleCondition>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRuleConditionType *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity)> type;
};
template <>
struct falcon::define_interface<Outlook::_Categories>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Category * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, Outlook::_Category * *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_Category>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryColor *), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryColor), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryShortcutKey *), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryShortcutKey), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG), 
HRESULT(__stdcall*)(void *, ULONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_PreviewPane>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Outlook::View>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_Views>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::View * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewType, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_StorageItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_Table>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Row * *), 
HRESULT(__stdcall*)(void *, Outlook::_Row * *), 
HRESULT(__stdcall*)(void *, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, Outlook::_Row * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Table * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::_Columns * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Row>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT, DATE *), 
HRESULT(__stdcall*)(void *, VARIANT, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Columns>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Column * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Column * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Column>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_CalendarSharing>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlCalendarMailFormat, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::OlCalendarDetail *), 
HRESULT(__stdcall*)(void *, Outlook::OlCalendarDetail), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_MailItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlPermission *), 
HRESULT(__stdcall*)(void *, Outlook::OlPermission), 
HRESULT(__stdcall*)(void *, Outlook::OlPermissionService *), 
HRESULT(__stdcall*)(void *, Outlook::OlPermissionService), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_ContactItem *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::Links>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Link * *), 
HRESULT(__stdcall*)(void *, IDispatch *, Outlook::Link * *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::Link>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Outlook::ItemProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::ItemProperty * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlUserPropertyType, VARIANT, VARIANT, Outlook::ItemProperty * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::ItemProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlUserPropertyType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Outlook::Conflicts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Conflict * *), 
HRESULT(__stdcall*)(void *, Outlook::Conflict * *), 
HRESULT(__stdcall*)(void *, Outlook::Conflict * *), 
HRESULT(__stdcall*)(void *, Outlook::Conflict * *), 
HRESULT(__stdcall*)(void *, Outlook::Conflict * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Conflict>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Conversation>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_Table * *), 
HRESULT(__stdcall*)(void *, IDispatch *, Outlook::_SimpleItems * *), 
HRESULT(__stdcall*)(void *, IDispatch *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_SimpleItems * *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *, Outlook::OlAlwaysDeleteConversation *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlwaysDeleteConversation, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, Outlook::_Store *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_SimpleItems>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_UserDefinedProperties>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_UserDefinedProperty * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlUserPropertyType, VARIANT, VARIANT, Outlook::_UserDefinedProperty * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_UserDefinedProperty * *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_UserDefinedProperty>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlUserPropertyType *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ExchangeUser>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlDisplayType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, DATE, LONG, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_ContactItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeUser * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAddressEntryUserType *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeDistributionList * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeUser * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlUnifiedGroupFolderType, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::OlUnifiedGroupFolderType, BSTR, Outlook::MAPIFolder * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ExchangeDistributionList>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlDisplayType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IUnknown *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, DATE, LONG, VARIANT, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_ContactItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeUser * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAddressEntryUserType *), 
HRESULT(__stdcall*)(void *, Outlook::_ExchangeDistributionList * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntries * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlUnifiedGroupFolderType, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::OlUnifiedGroupFolderType, BSTR, Outlook::MAPIFolder * *)> type;
};
template <>
struct falcon::define_interface<Outlook::AddressLists>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::AddressList * *)> type;
};
template <>
struct falcon::define_interface<Outlook::SyncObjects>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_SyncObject * *), 
HRESULT(__stdcall*)(void *, Outlook::_SyncObject * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_SyncObject>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Accounts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Account * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Stores>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Store * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_SelectNamesDialog>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlRecipientSelectors *), 
HRESULT(__stdcall*)(void *, Outlook::OlRecipientSelectors), 
HRESULT(__stdcall*)(void *, Outlook::AddressList * *), 
HRESULT(__stdcall*)(void *, Outlook::AddressList *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultSelectNamesDisplayMode)> type;
};
template <>
struct falcon::define_interface<Outlook::_SharingItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_SharingItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::OlSharingProvider *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlSharingMsgType *), 
HRESULT(__stdcall*)(void *, Outlook::OlSharingMsgType), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultFolders *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_SharingItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_ContactItem *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlPermission *), 
HRESULT(__stdcall*)(void *, Outlook::OlPermission), 
HRESULT(__stdcall*)(void *, Outlook::OlPermissionService *), 
HRESULT(__stdcall*)(void *, Outlook::OlPermissionService), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Explorers>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Explorer * *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::OlFolderDisplayMode, Outlook::_Explorer * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Inspectors>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, IDispatch *, Outlook::_Inspector * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Search>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_Results * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::_Table * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Results>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::OlItemType *), 
HRESULT(__stdcall*)(void *, Outlook::OlItemType)> type;
};
template <>
struct falcon::define_interface<Outlook::_Reminders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_Reminder * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, IUnknown * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_Reminder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TimeZones>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_TimeZone * *), 
HRESULT(__stdcall*)(void *, DATE, Outlook::_TimeZone *, Outlook::_TimeZone *, DATE *), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZone * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_OlkTimeZoneControl>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::OlAppointmentTimeField *), 
HRESULT(__stdcall*)(void *, Outlook::OlAppointmentTimeField), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlBorderStyle), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Picture * *), 
HRESULT(__stdcall*)(void *, Picture *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer *), 
HRESULT(__stdcall*)(void *, Outlook::OlMousePointer), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::PropertyPages>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::RecurrencePattern>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlDaysOfWeek *), 
HRESULT(__stdcall*)(void *, Outlook::OlDaysOfWeek), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::Exceptions * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlRecurrenceType *), 
HRESULT(__stdcall*)(void *, Outlook::OlRecurrenceType), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE, Outlook::_AppointmentItem * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Exceptions>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::Exception * *)> type;
};
template <>
struct falcon::define_interface<Outlook::Exception>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_AppointmentItem * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_AppointmentItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlBusyStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlBusyStatus), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlMeetingStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlMeetingStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlNetMeetingType *), 
HRESULT(__stdcall*)(void *, Outlook::OlNetMeetingType), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRecurrenceState *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlResponseStatus *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::RecurrencePattern * *), 
HRESULT(__stdcall*)(void *, Outlook::OlMeetingResponse, VARIANT, VARIANT, Outlook::_MeetingItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZone * *), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZone *), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZone * *), 
HRESULT(__stdcall*)(void *, Outlook::_TimeZone *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, Outlook::OlAppointmentCopyOptions, Outlook::_AppointmentItem * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::AddressEntry * *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat)> type;
};
template <>
struct falcon::define_interface<Outlook::_MeetingItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_MeetingItem * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Outlook::_AppointmentItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon *), 
HRESULT(__stdcall*)(void *, Outlook::OlFlagIcon), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat)> type;
};
template <>
struct falcon::define_interface<Outlook::OutlookBarGroup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_OutlookBarShortcuts * *), 
HRESULT(__stdcall*)(void *, Outlook::OlOutlookBarViewType *), 
HRESULT(__stdcall*)(void *, Outlook::OlOutlookBarViewType)> type;
};
template <>
struct falcon::define_interface<Outlook::_OutlookBarShortcuts>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::OutlookBarShortcut * *), 
HRESULT(__stdcall*)(void *, VARIANT, BSTR, VARIANT, Outlook::OutlookBarShortcut * *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::OutlookBarShortcut>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_OutlookBarGroups>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::OutlookBarGroup * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::OutlookBarGroup * *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_OutlookBarPane>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OutlookBarStorage * *), 
HRESULT(__stdcall*)(void *, Outlook::OutlookBarGroup * *), 
HRESULT(__stdcall*)(void *, Outlook::OutlookBarGroup *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::OutlookBarStorage>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_OutlookBarGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::PropertyPage>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::PropertyPageSite>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::Pages>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_DocumentItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NoteItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlNoteColor *), 
HRESULT(__stdcall*)(void *, Outlook::OlNoteColor), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ViewField>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_ColumnFormat * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ColumnFormat>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlAlign *), 
HRESULT(__stdcall*)(void *, Outlook::OlAlign), 
HRESULT(__stdcall*)(void *, Outlook::OlUserPropertyType *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ViewFields>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_ViewField * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_ViewField * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::_ViewField * *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_IconView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, Outlook::OlIconViewType *), 
HRESULT(__stdcall*)(void *, Outlook::OlIconViewType), 
HRESULT(__stdcall*)(void *, Outlook::OlIconViewPlacement *), 
HRESULT(__stdcall*)(void *, Outlook::OlIconViewPlacement)> type;
};
template <>
struct falcon::define_interface<Outlook::_OrderFields>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_OrderField * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::_OrderField * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, VARIANT, Outlook::_OrderField * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_OrderField>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_CardView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFields * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_AutoFormatRules * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ViewFont>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlColor *), 
HRESULT(__stdcall*)(void *, Outlook::OlColor), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryColor *), 
HRESULT(__stdcall*)(void *, Outlook::OlCategoryColor)> type;
};
template <>
struct falcon::define_interface<Outlook::_AutoFormatRules>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_AutoFormatRule * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_AutoFormatRule * *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT, Outlook::_AutoFormatRule * *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *)> type;
};
template <>
struct falcon::define_interface<Outlook::_AutoFormatRule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TimelineView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultExpandCollapseSetting *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultExpandCollapseSetting), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::OlTimelineViewMode *), 
HRESULT(__stdcall*)(void *, Outlook::OlTimelineViewMode)> type;
};
template <>
struct falcon::define_interface<Outlook::_MailModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationGroups>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_NavigationGroup * *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::_NavigationGroup * *), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroup *), 
HRESULT(__stdcall*)(void *, Outlook::OlGroupType, Outlook::_NavigationGroup * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationGroup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlGroupType *), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationFolders * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationFolders>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT, Outlook::_NavigationFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, Outlook::_NavigationFolder * *), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationFolder *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NavigationFolder>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_CalendarModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ContactsModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TasksModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_JournalModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_NotesModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_NavigationGroups * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_BusinessCardView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG)> type;
};
template <>
struct falcon::define_interface<Outlook::_FormRegionStartup>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, BSTR, IDispatch *, LONG, Outlook::OlFormRegionMode, Outlook::OlFormRegionSize, VARIANT *), 
HRESULT(__stdcall*)(void *, Outlook::_FormRegion *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, VARIANT *), 
HRESULT(__stdcall*)(void *, BSTR, LONG, Outlook::OlFormRegionIcon, VARIANT *)> type;
};
template <>
struct falcon::define_interface<Outlook::_FormRegion>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlFormRegionMode *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, IDispatch *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_SolutionsModule>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::OlNavigationModuleType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, Outlook::OlSolutionScope)> type;
};
template <>
struct falcon::define_interface<Outlook::_CalendarView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlCalendarViewMode *), 
HRESULT(__stdcall*)(void *, Outlook::OlCalendarViewMode), 
HRESULT(__stdcall*)(void *, Outlook::OlDayWeekTimeScale *), 
HRESULT(__stdcall*)(void *, Outlook::OlDayWeekTimeScale), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_AutoFormatRules * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TableView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFields * *), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultExpandCollapseSetting *), 
HRESULT(__stdcall*)(void *, Outlook::OlDefaultExpandCollapseSetting), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlMultiLine *), 
HRESULT(__stdcall*)(void *, Outlook::OlMultiLine), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::OlGridLineStyle *), 
HRESULT(__stdcall*)(void *, Outlook::OlGridLineStyle), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::_ViewFont * *), 
HRESULT(__stdcall*)(void *, Outlook::OlAutoPreview *), 
HRESULT(__stdcall*)(void *, Outlook::OlAutoPreview), 
HRESULT(__stdcall*)(void *, Outlook::_AutoFormatRules * *), 
HRESULT(__stdcall*)(void *, Outlook::_Table * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL)> type;
};
template <>
struct falcon::define_interface<Outlook::_MobileItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlMobileFormat *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_MobileItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MobileItem * *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_MobileItem * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_JournalItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_PostItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::_MailItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat *), 
HRESULT(__stdcall*)(void *, Outlook::OlBodyFormat), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_TaskItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskDelegationState *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskOwnership *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::Recipients * *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskResponse *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskStatus), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::RecurrencePattern * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::OlTaskResponse, VARIANT, VARIANT, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account * *), 
HRESULT(__stdcall*)(void *, Outlook::_Account *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_DistListItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients *), 
HRESULT(__stdcall*)(void *, Outlook::Recipients *), 
HRESULT(__stdcall*)(void *, LONG, Outlook::Recipient * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::Recipient *), 
HRESULT(__stdcall*)(void *, Outlook::Recipient *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, Outlook::OlMarkInterval), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_ReportItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *)> type;
};
template <>
struct falcon::define_interface<Outlook::_RemoteItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *)> type;
};
template <>
struct falcon::define_interface<Outlook::_TaskRequestItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_TaskRequestAcceptItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_TaskRequestDeclineItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_TaskRequestUpdateItem>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::Actions * *), 
HRESULT(__stdcall*)(void *, Outlook::Attachments * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::FormDescription * *), 
HRESULT(__stdcall*)(void *, Outlook::_Inspector * *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance *), 
HRESULT(__stdcall*)(void *, Outlook::OlImportance), 
HRESULT(__stdcall*)(void *, DATE *), 
HRESULT(__stdcall*)(void *, IUnknown * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity *), 
HRESULT(__stdcall*)(void *, Outlook::OlSensitivity), 
HRESULT(__stdcall*)(void *, LONG *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, Outlook::UserProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlInspectorClose), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, VARIANT), 
HRESULT(__stdcall*)(void *, Outlook::MAPIFolder *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, VARIANT), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL, Outlook::_TaskItem * *), 
HRESULT(__stdcall*)(void *, Outlook::Links * *), 
HRESULT(__stdcall*)(void *, Outlook::OlDownloadState *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, Outlook::ItemProperties * *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus *), 
HRESULT(__stdcall*)(void *, Outlook::OlRemoteStatus), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::Conflicts * *), 
HRESULT(__stdcall*)(void *, Outlook::_PropertyAccessor * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, VARIANT *), 
HRESULT(__stdcall*)(void *, VARIANT)> type;
};
template <>
struct falcon::define_interface<Outlook::_ConversationHeader>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *, Outlook::_Conversation * *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, Outlook::_SimpleItems * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_PeopleView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::_OrderFields * *)> type;
};
template <>
struct falcon::define_interface<Outlook::_ThreadView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
template <>
struct falcon::define_interface<Outlook::_MessageListView>
{
typedef vtable<
HRESULT(__stdcall*)(void *, const GUID *, void * *), 
ULONG(__stdcall*)(void *), 
ULONG(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, UINT *), 
HRESULT(__stdcall*)(void *, UINT, LCID, ITypeInfo * *), 
HRESULT(__stdcall*)(void *, const GUID *, LPOLESTR *, UINT, LCID, DISPID *), 
HRESULT(__stdcall*)(void *, DISPID, const GUID *, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *), 
HRESULT(__stdcall*)(void *, Outlook::_Application * *), 
HRESULT(__stdcall*)(void *, Outlook::OlObjectClass *), 
HRESULT(__stdcall*)(void *, Outlook::_NameSpace * *), 
HRESULT(__stdcall*)(void *, IDispatch * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR, Outlook::OlViewSaveOption, Outlook::View * *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, Outlook::OlViewSaveOption *), 
HRESULT(__stdcall*)(void *, VARIANT_BOOL *), 
HRESULT(__stdcall*)(void *, Outlook::OlViewType *), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR), 
HRESULT(__stdcall*)(void *, DATE), 
HRESULT(__stdcall*)(void *, BSTR *), 
HRESULT(__stdcall*)(void *, BSTR)> type;
};
